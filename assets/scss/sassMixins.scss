/* Font include beginning */


@font-face {
    font-family: 'RobotoLight';
    src: url('~/fonts/RobotoCondensed-Light.ttf'),
}

@font-face {
   font-family: 'RobotoRegular';
   src: url('~/fonts/RobotoCondensed-Regular.ttf'),
}

@font-face {
    font-family: 'RobotoBold';
    src: url('~/fonts/RobotoCondensed-Bold.ttf'),
}


/* Font include ending */

/* Mixins for fonts beginning */


/* mixin for roboto-light font*/
@mixin robotoLight() {
    font-family:RobotoLight,
 }
 
 /* mixin for roboto-regular font*/
 @mixin robotoRegular() {
    font-family:RobotoRegular,
 }
 
 
 /* mixin for roboto-bold font*/
 @mixin  robotoBold() {
    font-family:RobotoBold,
 }

 
/* Mixins for fonts ending */

/* Element alignment mixins beginning */


/* Align horizontal vertical element position via argument */
@mixin verticalHorizontalCalc($position, $left, $top, $left-translate, $top-translate) {
   position: $position;
   left: $left;
   top: $top;
   -webkit-transform: translate($left-translate, $top-translate);
   -ms-transform: translate($left-translate, $top-translate);
   transform: translate($left-translate, $top-translate);
}

/* Align horizontal  */
@mixin horizonAlignCenter() {
   position: absolute;
   left: 50%;
   -webkit-transform: translateX(-50%);
   -ms-transform: translateX(-50%);
   transform: translateX(-50%);
}

/* Align vertical */
@mixin verticalAlignCenter() {
   position: absolute;
   top: 50%;
   -webkit-transform: translateY(-50%);
   -ms-transform: translateY(-50%);
   transform: translateY(-50%);
}


/* Element alignment mixins ending */

/* Element typography mixins beginning */


/* Text complex values */
@mixin textComplexValues($font-weight, $size, $letter-spacing) {
   font-weight: $font-weight;
   font-size: $size;
   letter-spacing: $letter-spacing;
}

/* Element typography mixins beginning */

/* Element objects shapes block beginning */


/* Buton shape mixin */
@mixin buttonShapes($border-radius, $padding-top, $padding-bottom, $padding-left, $padding-right) {
   border-radius: $border-radius;
   -webkit-border-radius: $border-radius;
   -moz-border-radius: $border-radius;
   -ms-border-radius: $border-radius;
   -o-border-radius: $border-radius;
   padding-top: $padding-top;
   padding-bottom: $padding-bottom;
   padding-left: $padding-left;
   padding-right: $padding-right;
}

/* Element form input bottom border */
@mixin inputBottomBorder($width, $style, $color) {
   border-bottom-width: $width;
   border-bottom-style: $style;
   border-bottom-color: $color;
} 

/* Element width value */
@mixin widthValue($width) {
   width: $width;
}

/* Element form border */
@mixin inputCompleteBorder($width, $style, $color) {
   border-width: $width;
   border-style: $style;
   border-color: $color;
}

/* Element border radius */
@mixin borderRadius($radius) {
   border-radius: $radius;
   -webkit-border-radius: $radius;
   -moz-border-radius: $radius;
   -ms-border-radius: $radius;
   -o-border-radius: $radius;
}

/* Element transition effect when hover */
@mixin alpha-background-color($color, $background) {
   $percent: alpha($color) * 100%;
   $opaque: opacify($color, 1);
   $solid-color: mix($opaque, $background, $percent);
   background-color: $solid-color;
   background-color: $color;
}

/* Element top value */
@mixin topPosition($top) {
   top: $top;
}

@mixin paddingValues($top, $bottom, $left, $right) {
   padding-top: $top;
   padding-bottom: $bottom;
   padding-left: $left;
   padding-right: $right
}

/* Element objects shapes block ending */

/* GLitch effect block beginning */


@mixin textGlitch($name, $intensity, $textColor, $background, $highlightColor1, $highlightColor2, $width, $height) {
  
   color: $textColor;
   position: relative;
   $steps: $intensity;
   
   // Ensure the @keyframes are generated at the root level
   @at-root {
     // We need two different ones
     @for $i from 1 through 2 {
       @keyframes #{$name}-anim-#{$i} {
         @for $i from 0 through $steps {
           #{percentage($i*(1/$steps))} {
             clip: rect(
               random($height)+px,
               $width+px,
               random($height)+px,
               0
             );
           }
         }
       }
     }
   }
   &:before,
   &:after {
     content: attr(data-text);
     position: absolute;
     top: 0;
     left: 0;
     width: 100%;
     background: $background;
     clip: rect(0, 0, 0, 0); 
   }
   &:after {
     left: 2px;
     text-shadow: -1px 0 $highlightColor1;
     animation: #{$name}-anim-1 2s infinite linear alternate-reverse;
   }
   &:before {
     left: -2px;
     text-shadow: 2px 0 $highlightColor2; 
     animation: #{$name}-anim-2 3s infinite linear alternate-reverse;
   }
   
 }


/* GLitch effect block ending */